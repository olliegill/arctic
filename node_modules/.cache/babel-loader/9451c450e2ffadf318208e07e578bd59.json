{"ast":null,"code":"import { fetchData } from '../api/api';\nimport { observable, action, decorate } from 'mobx';\n\nclass AppStore {\n  constructor() {\n    this.searchResults = [];\n    this.repoData = {};\n\n    this.handleSearch = query => {\n      this.isSearchResultsLoading = true;\n      return new Promise((resolve, reject) => {\n        fetchData(query).then(response => {\n          this.searchResults = response && response.data.items;\n          this.isSearchResultsLoading = false;\n          resolve(response);\n        }).catch(e => {\n          this.isSearchResultsLoading = false;\n          reject(e);\n        });\n      });\n    };\n\n    this.fetchDataByRepoName = (name, repo) => {\n      const query = `repo:${name}/${repo}`;\n      return new Promise((resolve, reject) => {\n        fetchData(query).then(response => {\n          this.repoData = response && response.data.items[0];\n          resolve(response);\n        }).catch(e => {\n          reject(e);\n        });\n      });\n    };\n  }\n\n}\n\nexport default decorate(AppStore, {\n  handleSearch: action,\n  fetchDataByRepoName: action,\n  searchResults: observable,\n  repoData: observable,\n  isSearchResultsLoading: observable\n});","map":{"version":3,"sources":["/Users/olivergill/arctic/src/stores/AppStore.js"],"names":["fetchData","observable","action","decorate","AppStore","searchResults","repoData","handleSearch","query","isSearchResultsLoading","Promise","resolve","reject","then","response","data","items","catch","e","fetchDataByRepoName","name","repo"],"mappings":"AAAA,SAASA,SAAT,QAA0B,YAA1B;AACA,SAASC,UAAT,EAAqBC,MAArB,EAA6BC,QAA7B,QAA6C,MAA7C;;AAEA,MAAMC,QAAN,CAAe;AAAA;AAAA,SACXC,aADW,GACK,EADL;AAAA,SAEXC,QAFW,GAEA,EAFA;;AAAA,SAKXC,YALW,GAKKC,KAAD,IAAW;AACtB,WAAKC,sBAAL,GAA8B,IAA9B;AACA,aAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpCZ,QAAAA,SAAS,CAACQ,KAAD,CAAT,CACKK,IADL,CACWC,QAAD,IAAc;AAChB,eAAKT,aAAL,GAAqBS,QAAQ,IAAIA,QAAQ,CAACC,IAAT,CAAcC,KAA/C;AACA,eAAKP,sBAAL,GAA8B,KAA9B;AACAE,UAAAA,OAAO,CAACG,QAAD,CAAP;AACH,SALL,EAMKG,KANL,CAMYC,CAAD,IAAO;AACV,eAAKT,sBAAL,GAA8B,KAA9B;AACAG,UAAAA,MAAM,CAACM,CAAD,CAAN;AACH,SATL;AAUH,OAXM,CAAP;AAYH,KAnBU;;AAAA,SAqBXC,mBArBW,GAqBW,CAACC,IAAD,EAAOC,IAAP,KAAgB;AAClC,YAAMb,KAAK,GAAI,QAAOY,IAAK,IAAGC,IAAK,EAAnC;AACA,aAAO,IAAIX,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpCZ,QAAAA,SAAS,CAACQ,KAAD,CAAT,CACKK,IADL,CACWC,QAAD,IAAc;AAChB,eAAKR,QAAL,GAAgBQ,QAAQ,IAAIA,QAAQ,CAACC,IAAT,CAAcC,KAAd,CAAoB,CAApB,CAA5B;AACAL,UAAAA,OAAO,CAACG,QAAD,CAAP;AACH,SAJL,EAKKG,KALL,CAKYC,CAAD,IAAO;AACVN,UAAAA,MAAM,CAACM,CAAD,CAAN;AACH,SAPL;AAQH,OATM,CAAP;AAUH,KAjCU;AAAA;;AAAA;;AAoCf,eAAef,QAAQ,CAACC,QAAD,EAAW;AAC9BG,EAAAA,YAAY,EAAEL,MADgB;AAE9BiB,EAAAA,mBAAmB,EAAEjB,MAFS;AAG9BG,EAAAA,aAAa,EAAEJ,UAHe;AAI9BK,EAAAA,QAAQ,EAAEL,UAJoB;AAK9BQ,EAAAA,sBAAsB,EAAER;AALM,CAAX,CAAvB","sourcesContent":["import { fetchData } from '../api/api';\nimport { observable, action, decorate } from 'mobx';\n\nclass AppStore {\n    searchResults = [];\n    repoData = {};\n    isSearchResultsLoading;\n\n    handleSearch = (query) => {\n        this.isSearchResultsLoading = true;\n        return new Promise((resolve, reject) => {\n            fetchData(query)\n                .then((response) => {\n                    this.searchResults = response && response.data.items;\n                    this.isSearchResultsLoading = false;\n                    resolve(response);\n                })\n                .catch((e) => {\n                    this.isSearchResultsLoading = false;\n                    reject(e);\n                });\n        });\n    }\n\n    fetchDataByRepoName = (name, repo) => {\n        const query = `repo:${name}/${repo}`;\n        return new Promise((resolve, reject) => {\n            fetchData(query)\n                .then((response) => {\n                    this.repoData = response && response.data.items[0]\n                    resolve(response);\n                })\n                .catch((e) => {\n                    reject(e);\n                });\n        });\n    }\n}\n\nexport default decorate(AppStore, {\n    handleSearch: action,\n    fetchDataByRepoName: action,\n    searchResults: observable,\n    repoData: observable,\n    isSearchResultsLoading: observable\n});\n"]},"metadata":{},"sourceType":"module"}